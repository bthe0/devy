services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - traefik-public

  postgresql:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=development
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik-public

  mockserver:
    image: mockserver/mockserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mockserver.rule=Host(`mock.localhost`)"
      - "traefik.http.services.mockserver.loadbalancer.server.port=1080"
    networks:
      - traefik-public

  rabbitmq:
    image: rabbitmq:3-management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.localhost`)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - traefik-public

  mailhog:
    image: mailhog/mailhog
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.localhost`)"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    networks:
      - traefik-public

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    networks:
      - traefik-public

  elasticsearch:
    image: elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - traefik-public

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=development
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - traefik-public

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=mysql
      - PMA_USER=root
      - PMA_PASSWORD=root
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`pma.localhost`)"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
    depends_on:
      - mysql
    networks:
      - traefik-public

  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.localhost`)"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.localhost`)"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    networks:
      - traefik-public

  memcached:
    image: memcached:latest
    networks:
      - traefik-public

  kafka:
    image: wurstmeister/kafka
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=localhost
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - traefik-public

  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - traefik-public

  jaeger:
    image: jaegertracing/all-in-one:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    networks:
      - traefik-public

  adminer:
    image: adminer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.localhost`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    networks:
      - traefik-public

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    networks:
      - traefik-public

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - traefik-public

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.localhost`)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    networks:
      - traefik-public

  vault:
    image: hashicorp/vault:latest
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.localhost`)"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"
    networks:
      - traefik-public

  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.localhost`)"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    networks:
      - traefik-public

  sonarqube:
    image: sonarqube:community
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`sonar.localhost`)"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
    networks:
      - traefik-public

  graylog:
    image: graylog/graylog:4.2
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://localhost:9001/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graylog.rule=Host(`graylog.localhost`)"
      - "traefik.http.services.graylog.loadbalancer.server.port=9000"
    depends_on:
      - mongodb
      - elasticsearch
    networks:
      - traefik-public

  zipkin:
    image: openzipkin/zipkin:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zipkin.rule=Host(`zipkin.localhost`)"
      - "traefik.http.services.zipkin.loadbalancer.server.port=9411"
    networks:
      - traefik-public

  consul:
    image: hashicorp/consul:latest
    command: agent -dev -client=0.0.0.0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.consul.rule=Host(`consul.localhost`)"
      - "traefik.http.services.consul.loadbalancer.server.port=8500"
    networks:
      - traefik-public

networks:
  traefik-public:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  rabbitmq_data:
  redis_data:
  elasticsearch_data:
  mysql_data:
  minio_data:
  grafana_data:
  prometheus_data:
  keycloak_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: